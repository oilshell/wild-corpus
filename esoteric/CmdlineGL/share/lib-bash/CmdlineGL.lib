# CmdlineGL Base API
#--------------------------------------
# Functions:
#   CmdlineGL_LoadLib LIBRARY [LIBRARY...]
#   CmdlineGL_LoadTex TEXTURE [TEXTURE...]
#   CmdlineGL_LoadFont FONT [FONT...]
#   CmdlineGL_Start [MODE]
#   CmdlineGL_Send COMMAND [ARGS...]
#   CmdlineGL_Recv
#   gl*
#   glu*
#   cgl*
#
# Variables:
#   CmdlineGL_LibPath - ':' separated list of directories where *.lib can be found
#   CmdlineGL_TexPath - same for *.png
#   CmdlineGL_FontPath - same for *.ttf
#   CmdlineGL_Mode: str - either 'stdout', 'w' or 'rw', or empty if CmdlineGL is not started yet
#   CmdlineGL_In: int - File handle of user input returned from CmdlineGL
#   CmdlineGL_Out: int - File handle where commands are written
#   CmdlineGL_InputLine: str - Most recent input event
#

CmdlineGL_Mode=
CmdlineGL_In=
CmdlineGL_Out=
CmdlineGL_InputLine=
CmdlineGL_LibLoaded=":"
CmdlineGL_TexLoaded=":"
CmdlineGL_FontLoaded=":"

CmdlineGL_LoadLib() {
	# Unpack path into an array, so that we can expand the path into 'find' cleanly
	IFS=':' read -ra CmdlineGL_LibPathAry <<< "$CmdlineGL_LibPath";
	for lib in "$@"; do
		if [[ "$CmdlineGL_LibLoaded" != *:"$lib":* ]]; then
			local fname;
			# If full path name is given, load it directly
			if [[ "$lib" = */* ]]; then
				fname="$lib"
			else
				fname=`find "${CmdlineGL_LibPathAry[@]}" -name "$lib".lib | head -n 1` || { echo "Can't find lib '$lib' in path '$CmdlineGL_LibPath'"; return 2; }
			fi
			source "$fname" || { echo "Failed to load '$lib'"; return 2; }
			CmdlineGL_LibLoaded="$CmdlineGL_LibLoaded$lib:"
		fi
	done
}

CmdlineGL_LoadTex() {
	# Unpack path into an array, so that we can expand the path into 'find' cleanly
	IFS=':' read -ra CmdlineGL_TexPathAry <<< "$CmdlineGL_TexPath";
	for tex in "$@"; do
		if [[ "$CmdlineGL_TexLoaded" != *:"$tex":* ]]; then
			local fname=`find "${CmdlineGL_TexPathAry[@]}" -name "$tex".png | head -n 1` || { echo "Can't find Tex '$tex' in path '$CmdlineGL_TexPath'"; return 2; }
			glBindTexture GL_TEXTURE_2D "$tex"
			cglLoadImage2D "$fname"
			glTexParameter GL_TEXTURE_2D GL_TEXTURE_MIN_FILTER GL_LINEAR
			glTexParameter GL_TEXTURE_2D GL_TEXTURE_MAG_FILTER GL_LINEAR
		fi
	done
}

CmdlineGL_LoadFont() {
	# Unpack path into an array, so that we can expand the path into 'find' cleanly
	IFS=':' read -ra CmdlineGL_FontPathAry <<< "$CmdlineGL_FontPath";
	for font in "$@"; do
		if [[ "$CmdlineGL_FontLoaded" != *:"$font":* ]]; then
			local fname=`find "${CmdlineGL_FontPathAry[@]}" -name "$font".png | head -n 1` || { echo "Can't find Font '$font' in path '$CmdlineGL_FontPath'"; return 2; }
			echo "TODO" >&2; return 1;
		fi
	done
}

# Build aliases for each available command in the API.
# This is the first time we check for an executable CmdlineGL, but can't check its
# exit status within the substitution...
CmdlineGL_Commands=( $( CmdlineGL --showcmds ) ) || { echo "Can't run CmdlineGL"; return 2; }
for cmd in ${CmdlineGL_Commands[@]}; do eval "$cmd(){ CmdlineGL_Send $cmd \"\$@\"; }"; done

# This default gets overwritten by CmdlineGL_Start  (thunk/trampoline style)
CmdlineGL_Send() {
	CmdlineGL_Start
	CmdlineGL_Send "$@"
}
CmdlineGL_Recv() {
	CmdlineGL_Start
	CmdlineGL_Recv "$@"
}
# If we are running under bash, we can create a coprocess
# and skip all the fifo nonsense.
CmdlineGL_Start() {
	if [[ $# > 0 && "$1" == stdout ]]; then
		CmdlineGL_Mode=stdout
		CmdlineGL_Out=1
		CmdlineGL_Recv(){ return 1; }
	elif [[ $# > 0 && "$1" == rw ]]; then
		if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
			coproc CmdlineGL -t || return 1
			CmdlineGL_In="${COPROC[0]}"
			CmdlineGL_Out="${COPROC[1]}"
		else
			# In dark ages of bash, need to find free FDs and connect them to fifos
			CmdlineGL_CreateFifo || return 1
			CmdlineGL_NextFreeFD CmdlineGL_Out || return 1
			eval "exec $CmdlineGL_Out<>\"\$CMDLINEGL_FIFO_DIR/out\""
			# Start CmdlineGL before we open the input fifo, else it would block us
			CmdlineGL -t <&$CmdlineGL_Out >"$CMDLINEGL_FIFO_DIR/in" &
			CmdlineGL_NextFreeFD CmdlineGL_In || return 1
			eval "exec $CmdlineGL_In<\"\$CMDLINEGL_FIFO_DIR/in\""
		fi
		CmdlineGL_Mode=rw
		CmdlineGL_Recv(){ read -r -u $CmdlineGL_In CmdlineGL_InputLine; };
	else
		if [[ "${BASH_VERSINFO[0]}" -ge 4 ]]; then
			coproc CmdlineGL -t --noevents || return 1
			CmdlineGL_Out="${COPROC[1]}"
		else
			# In dark ages of bash, need to find free FDs and connect them to fifos
			CmdlineGL_CreateFifo || return 1
			CmdlineGL_NextFreeFD CmdlineGL_Out || return 1
			eval "exec $CmdlineGL_Out<>\"\$CMDLINEGL_FIFO_DIR/out\""
			CmdlineGL -t <&$CmdlineGL_Out &
		fi
		CmdlineGL_Mode=w
		CmdlineGL_Recv(){ return 1; }
	fi
	CmdlineGL_Send(){
		# Quote each argument, replacing occurrences of \ with \\, newline with \n and " with \"
		{ echo -n "$1"; shift; for x; do x="${x//\\/\\\\}"; x="${x//$'\n'/\\n}"; echo -n ' "'"${x//\"/\\\"}"'"'; done; echo; } >&$CmdlineGL_Out;
	};
	# Performance optimization! whee!  But not for the functions that need quoted arguments...
	for cmd in ${CmdlineGL_Commands[@]}; do
		if [[ "$cmd" != ftgl* && "$cmd" != cglEcho && "$cmd" != cglLoadImage2D  ]]; then
			eval "$cmd(){ echo $cmd \"\$@\" >&$CmdlineGL_Out; }";
		fi
	done
}

CmdlineGL_CreateFifo() {
	# Create a FIFO unless one is already active
	if [[ "z$CMDLINEGL_FIFO_DIR" = "z" ]]; then
		CMDLINEGL_FIFO_DIR=$(mktemp -d -t CmdlineGL.XXXXXX);
	elif [[ ! -d "$CMDLINEGL_FIFO_DIR" ]]; then
		echo "CMDLINEGL_FIFO_DIR '$CMDLINEGL_FIFO_DIR' does not exist"
		return 1
	fi
	[[ -e "$CMDLINEGL_FIFO_DIR/in" ]] || mkfifo "$CMDLINEGL_FIFO_DIR/in" || {
		echo "Failed to create input fifo";
		return 1;
	}
	[[ -e "$CMDLINEGL_FIFO_DIR/out" ]] || mkfifo "$CMDLINEGL_FIFO_DIR/out" || {
		echo "Failed to create output fifo";
		return 1;
	}
	return 0;
}

CmdlineGL_NextFreeFD() {
	local fd=2 fd_max=$(ulimit -n) dest_var=$1;
	while ((++fd < fd_max)); do ! true <&$fd && break; done 2>&- \
		&& (( $dest_var=fd )) \
		|| { echo "No free file descriptor"; return 1; }
}
